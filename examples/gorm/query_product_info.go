// Code generated by sqlboy. DO NOT EDIT.
package gorm

import "context"

type ProductInfoDao interface {
	CreateProductInfo(ctx context.Context, productInfo *ProductInfo) error
	BatchCreateProductInfo(ctx context.Context, list []*ProductInfo, batchSize int) error
	FindProductInfo(ctx context.Context, id uint32) (*ProductInfo, error)
	UpdateProductInfo(ctx context.Context, productInfo *ProductInfo) error
	DeleteProductInfo(ctx context.Context, id uint32) error
	FindByProductIdSkuId(ctx context.Context, productId string, skuId string) (*ProductInfo, error)
	UpdateByProductIdSkuId(ctx context.Context, productInfo *ProductInfo) error
	DeleteByProductIdSkuId(ctx context.Context, productId string, skuId string) error
}

type ProductInfoImpl struct {
	dao *Dao
}

func NewProductInfoDao(dao *Dao) ProductInfoDao {
	return &ProductInfoImpl{
		dao: dao,
	}
}

func (d *ProductInfoImpl) CreateProductInfo(ctx context.Context, productInfo *ProductInfo) error {
	return d.dao.DB(ctx).Create(productInfo).Error
}

func (d *ProductInfoImpl) BatchCreateProductInfo(ctx context.Context, list []*ProductInfo, batchSize int) error {
	return d.dao.DB(ctx).CreateInBatches(list, batchSize).Error
}

func (d *ProductInfoImpl) FindProductInfo(ctx context.Context, id uint32) (*ProductInfo, error) {
	var productInfo ProductInfo
	if err := d.dao.DB(ctx).Where("`id` = ?", id).First(&productInfo).Error; err != nil {
		return nil, err
	}
	return &productInfo, nil
}

func (d *ProductInfoImpl) UpdateProductInfo(ctx context.Context, productInfo *ProductInfo) error {
	return d.dao.DB(ctx).Where("`id` = ?", productInfo.Id).Updates(productInfo).Error
}

func (d *ProductInfoImpl) DeleteProductInfo(ctx context.Context, id uint32) error {
	return d.dao.DB(ctx).Where("`id` = ?", id).Delete(&ProductInfo{}).Error
}

func (d *ProductInfoImpl) FindByProductIdSkuId(ctx context.Context, productId string, skuId string) (*ProductInfo, error) {
	var productInfo ProductInfo
	if err := d.dao.DB(ctx).Where("`product_id` = ? AND `sku_id` = ?", productId, skuId).First(&productInfo).Error; err != nil {
		return nil, err
	}
	return &productInfo, nil
}

func (d *ProductInfoImpl) UpdateByProductIdSkuId(ctx context.Context, productInfo *ProductInfo) error {
	return d.dao.DB(ctx).Where("`product_id` = ? AND `sku_id` = ?", productInfo.ProductId, productInfo.SkuId).Updates(productInfo).Error
}

func (d *ProductInfoImpl) DeleteByProductIdSkuId(ctx context.Context, productId string, skuId string) error {
	return d.dao.DB(ctx).Where("`product_id` = ? AND `sku_id` = ?", productId, skuId).Delete(&ProductInfo{}).Error
}
